import { motion } from 'framer-motion';
import styled from 'styled-components';
import { useTranslation } from 'react-i18next';
import { cardHover } from '../utils/animations';
import { useState } from 'react';

// üé¥ Container do card com perspectiva 3D
const CardContainer = styled(motion.div)`
  perspective: 1000px;
  cursor: pointer;
`;

// üÉè Card principal com efeito tilt
const TiltCard = styled(motion.div) <{ $hasUrl?: boolean }>`
  background: ${({ theme }) => theme.colors.card};
  border: 1px solid ${({ theme }) => theme.colors.border};
  border-radius: 20px;
  overflow: hidden;
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);
  transform-style: preserve-3d;
  position: relative;
  z-index: 1;
  cursor: ${({ $hasUrl }) => $hasUrl ? 'pointer' : 'default'};

  &:hover {
    border-color: ${({ theme }) => theme.colors.primary}30;
    box-shadow: 0 25px 50px ${({ theme }) => theme.colors.primary}20;
    transform: translateY(-10px) scale(1.02);
    z-index: 999;
  }
`;

// üé® Overlay da stack que aparece no hover
const StackOverlay = styled(motion.div)`
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(135deg, rgba(139, 124, 248, 0.9), rgba(29, 209, 161, 0.9));
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: 600;
  text-align: center;
  padding: 2rem;
  z-index: 2;
`;

const StackTitle = styled.h4`
  font-size: 1.2rem;
  margin-bottom: 1rem;
  color: white;
`;

const StackList = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  justify-content: center;
`;

const StackItem = styled.span`
  background: rgba(255, 255, 255, 0.2);
  padding: 0.3rem 0.8rem;
  border-radius: 15px;
  font-size: 0.8rem;
  font-weight: 500;
`;

const ProjectImage = styled.div<{ $hasImage?: boolean }>`
  height: 200px;
  background: ${({ $hasImage }) =>
    $hasImage
      ? 'transparent'
      : 'linear-gradient(135deg, rgba(139, 124, 248, 0.2), rgba(29, 209, 161, 0.2))'
  };
  border-bottom: 1px solid rgba(255, 255, 255, 0.05);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 3rem;
  position: relative;
  overflow: hidden;
`;

const ProjectImageImg = styled.img`
  width: 100%;
  height: 100%;
  object-fit: cover;
  position: absolute;
  top: 0;
  left: 0;
`;

const ProjectImageIcon = styled.div`
  position: relative;
  z-index: 1;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
`;

const ClickIndicator = styled.div<{ $visible: boolean }>`
  position: absolute;
  top: 12px;
  right: 12px;
  background: ${({ theme }) => theme.colors.primary};
  color: white;
  padding: 4px 8px;
  border-radius: 12px;
  font-size: 0.7rem;
  font-weight: 600;
  z-index: 3;
  opacity: ${({ $visible }) => $visible ? 1 : 0};
  transition: opacity 0.3s ease;
  pointer-events: none;
`;

const ProjectContent = styled.div`
  padding: 2rem;
`;

const ProjectTitle = styled.h3`
  font-size: 1.5rem;
  font-weight: 700;
  color: ${({ theme }) => theme.colors.text};
  margin-bottom: 1rem;
`;

const ProjectDescription = styled.p`
  color: ${({ theme }) => theme.colors.textSecondary};
  line-height: 1.6;
  margin-bottom: 1.5rem;
`;

interface ProjectCardProps {
  title: string;
  description: string;
  icon: string;
  stack: string[];
  imageUrl?: string;
  liveUrl?: string;
  githubUrl?: string;
}

/**
 * üéØ Card de projeto com efeito 3D tilt e overlay de stack
 * 
 * Caracter√≠sticas:
 * - Efeito tilt 3D realista no hover
 * - Overlay com stack tecnol√≥gica ao passar o mouse
 * - Anima√ß√µes suaves com Framer Motion
 * - Design glassmorphism moderno
 */
export const ProjectCard3D = ({ title, description, icon, stack, imageUrl, liveUrl, githubUrl }: ProjectCardProps) => {
  const { t, i18n } = useTranslation();
  const [showStack, setShowStack] = useState(false);

  // üö® DEBUG: Log cr√≠tico para debugar
  console.warn(`üîç ProjectCard3D renderizado: "${title}" | Idioma: ${i18n.language}`);

  // üåç Sistema de tradu√ß√£o dos projetos
  const getTranslatedProject = (originalTitle: string, originalDescription: string) => {
    console.log('üîç Iniciando tradu√ß√£o para:', { originalTitle, currentLang: i18n.language });

    const translations: Record<string, {
      title: { pt: string; en: string; es: string };
      description: { pt: string; en: string; es: string };
    }> = {
      // === PROJETOS IDENTIFICADOS NO HTML ===
      "Sistema de Agendamento para Est√∫dio de Tatuagem": {
        title: {
          pt: "Sistema de Agendamento para Est√∫dio de Tatuagem",
          en: "Tattoo Studio Scheduling System",
          es: "Sistema de Reservas para Estudio de Tatuajes"
        },
        description: {
          pt: "Aplica√ß√£o web desenvolvida para facilitar o agendamento de sess√µes de tatuagem, tanto para clientes quanto para tatuadores. A plataforma permite aos clientes escolherem hor√°rios dispon√≠veis, visualizar portf√≥lios dos tatuadores e enviar detalhes da tatuagem desejada. Para os administradores, oferece um painel com controle de agendamentos, notifica√ß√µes e gest√£o de usu√°rios.",
          en: "Web application developed to facilitate tattoo session scheduling for both clients and tattoo artists. The platform allows clients to choose available times, view artist portfolios and send details of the desired tattoo. For administrators, it offers a panel with appointment control, notifications and user management.",
          es: "Aplicaci√≥n web desarrollada para facilitar la programaci√≥n de sesiones de tatuajes tanto para clientes como para tatuadores. La plataforma permite a los clientes elegir horarios disponibles, ver portafolios de tatuadores y enviar detalles del tatuaje deseado. Para administradores, ofrece un panel con control de citas, notificaciones y gesti√≥n de usuarios."
        }
      },
      "Portfolio Antigo": {
        title: {
          pt: "Portf√≥lio Antigo",
          en: "Old Portfolio",
          es: "Portafolio Antiguo"
        },
        description: {
          pt: "Portf√≥lio criado quando estava iniciando meus estudos em ReactJs",
          en: "Portfolio created when I was starting my studies in ReactJs",
          es: "Portafolio creado cuando estaba iniciando mis estudios en ReactJs"
        }
      },
      "Cat√°logo Nick Festas ‚Äì Cat√°logo de Produtos": {
        title: {
          pt: "Cat√°logo Nick Festas ‚Äì Cat√°logo de Produtos",
          en: "Nick Parties Catalog ‚Äì Product Catalog",
          es: "Cat√°logo Nick Fiestas ‚Äì Cat√°logo de Productos"
        },
        description: {
          pt: "Site institucional com listagem din√¢mica de produtos. Layout leve, responsivo e f√°cil de atualizar. Demonstra uso de props, mapeamento de arrays e estiliza√ß√£o modular em React.",
          en: "Institutional website with dynamic product listing. Light, responsive layout that's easy to update. Demonstrates use of props, array mapping and modular styling in React.",
          es: "Sitio web institucional con listado din√°mico de productos. Dise√±o ligero, responsivo y f√°cil de actualizar. Demuestra el uso de props, mapeo de arrays y estilizaci√≥n modular en React."
        }
      },
      "Desafio Psel Front ‚Äì Consumo da API do IBGE": {
        title: {
          pt: "Desafio Psel Front ‚Äì Consumo da API do IBGE",
          en: "Frontend Challenge ‚Äì IBGE API Consumption",
          es: "Desaf√≠o Frontend ‚Äì Consumo de API del IBGE"
        },
        description: {
          pt: "Aplica√ß√£o criada como desafio t√©cnico de processo seletivo. Consome dados da API do IBGE, exibindo estados e cidades dinamicamente. Estrutura baseada em hooks, tipagem com TypeScript e boas pr√°ticas de manipula√ß√£o de dados ass√≠ncronos.",
          en: "Application created as a technical challenge for a selection process. Consumes data from the IBGE API, dynamically displaying states and cities. Structure based on hooks, TypeScript typing and best practices for asynchronous data handling.",
          es: "Aplicaci√≥n creada como desaf√≠o t√©cnico de proceso selectivo. Consume datos de la API del IBGE, mostrando estados y ciudades din√°micamente. Estructura basada en hooks, tipado con TypeScript y buenas pr√°cticas de manejo de datos as√≠ncronos."
        }
      },
      "Calculadora": {
        title: {
          pt: "Calculadora",
          en: "Calculator",
          es: "Calculadora"
        },
        description: {
          pt: "Calculadora funcional com opera√ß√µes b√°sicas, desenvolvida com componentes reutiliz√°veis e gerenciamento de estado via React. Interface limpa, responsiva e l√≥gica matem√°tica 100% funcional.",
          en: "Functional calculator with basic operations, developed with reusable components and state management via React. Clean, responsive interface with 100% functional mathematical logic.",
          es: "Calculadora funcional con operaciones b√°sicas, desarrollada con componentes reutilizables y gesti√≥n de estado v√≠a React. Interfaz limpia, responsiva y l√≥gica matem√°tica 100% funcional."
        }
      },
      // === PROJETOS ADICIONAIS COMUNS ===
      "Portfolio Denivan": {
        title: { pt: "Portf√≥lio Denivan", en: "Denivan Portfolio", es: "Portafolio Denivan" },
        description: {
          pt: "Portf√≥lio pessoal desenvolvido com React, TypeScript, Firebase e Styled Components. Sistema completo com √°rea administrativa.",
          en: "Personal portfolio developed with React, TypeScript, Firebase and Styled Components. Complete system with admin area.",
          es: "Portafolio personal desarrollado con React, TypeScript, Firebase y Styled Components. Sistema completo con √°rea administrativa."
        }
      }
    };

    const projectTranslation = translations[originalTitle];
    console.log('üîç Buscando tradu√ß√£o espec√≠fica para:', originalTitle);
    console.log('üîç Encontrado:', !!projectTranslation);

    if (projectTranslation) {
      const lang = i18n.language as 'pt' | 'en' | 'es';
      console.log('‚úÖ Usando tradu√ß√£o espec√≠fica para idioma:', lang);
      return {
        title: projectTranslation.title[lang] || projectTranslation.title.pt,
        description: projectTranslation.description[lang] || projectTranslation.description.pt
      };
    }

    // ü§ñ Sistema de tradu√ß√£o autom√°tica para projetos novos
    const currentLang = i18n.language as 'pt' | 'en' | 'es';
    console.log('ü§ñ Projeto n√£o encontrado nas tradu√ß√µes manuais. Aplicando tradu√ß√£o autom√°tica...');

    // Se estiver em portugu√™s, retorna o original
    if (currentLang === 'pt') {
      console.log('‚úÖ Idioma √© PT, retornando original');
      return { title: originalTitle, description: originalDescription };
    }

    // Tradu√ß√µes autom√°ticas b√°sicas
    const autoTranslateText = (text: string, targetLang: 'en' | 'es'): string => {
      let translated = text;
      console.log(`üîÑ Traduzindo "${text}" para ${targetLang}`);

      if (targetLang === 'en') {
        // Mapeamentos PT -> EN (mais completo)
        const translations: Record<string, string> = {
          // Palavras principais
          'Sistema': 'System', 'Aplica√ß√£o': 'Application', 'App': 'App',
          'Projeto': 'Project', 'Site': 'Website', 'Portal': 'Portal',
          'Dashboard': 'Dashboard', 'Plataforma': 'Platform', 'Loja': 'Store',
          'E-commerce': 'E-commerce', 'Blog': 'Blog', 'API': 'API',
          'Gerenciador': 'Manager', 'Calculadora': 'Calculator',
          'Conversor': 'Converter', 'Editor': 'Editor', 'Cat√°logo': 'Catalog',
          'Portf√≥lio': 'Portfolio', 'Teste': 'Test', 'Exemplo': 'Example',
          'Demo': 'Demo', 'Prot√≥tipo': 'Prototype', 'Novo': 'New',
          'P√°gina': 'Page', 'Interface': 'Interface', 'Layout': 'Layout',
          // Verbos e adjetivos
          'desenvolvido': 'developed', 'criado': 'created', 'feito': 'made',
          'constru√≠do': 'built', 'implementado': 'implemented',
          'testando': 'testing', 'traduzindo': 'translating', 'verificando': 'checking',
          'aplica√ß√£o': 'application', 'sistema': 'system', 'projeto': 'project',
          'funcional': 'functional', 'responsivo': 'responsive', 'moderno': 'modern',
          'completo': 'complete', 'simples': 'simple', 'avan√ßado': 'advanced',
          'din√¢mico': 'dynamic', 'interativo': 'interactive', 'b√°sico': 'basic',
          'novo': 'new', 'teste': 'test', 'exemplo': 'example',
          'tradu√ß√µes': 'translations', 'tradu√ß√£o': 'translation', 'projetos': 'projects',
          'dos': 'of the', 'das': 'of the', 'do': 'of the', 'da': 'of the',
          'as': 'the', 'os': 'the', 'um': 'a', 'uma': 'a',
          // Preposi√ß√µes e conectores
          'com': 'with', 'para': 'for', 'de': 'of', 'em': 'in',
          'usando': 'using', 'utilizando': 'using', 'atrav√©s': 'through',
          'sobre': 'about', 'entre': 'between', 'dentro': 'inside'
        };

        Object.entries(translations).forEach(([pt, en]) => {
          // Usa regex para buscar palavras inteiras
          const regex = new RegExp(`\\b${pt}\\b`, 'gi');
          translated = translated.replace(regex, en);
        });
      }

      if (targetLang === 'es') {
        // Mapeamentos PT -> ES (mais completo)
        const translations: Record<string, string> = {
          // Palavras principais
          'Sistema': 'Sistema', 'Aplica√ß√£o': 'Aplicaci√≥n', 'App': 'App',
          'Projeto': 'Proyecto', 'Site': 'Sitio', 'Portal': 'Portal',
          'Dashboard': 'Dashboard', 'Plataforma': 'Plataforma', 'Loja': 'Tienda',
          'E-commerce': 'E-commerce', 'Blog': 'Blog', 'API': 'API',
          'Gerenciador': 'Gestor', 'Calculadora': 'Calculadora',
          'Conversor': 'Convertidor', 'Editor': 'Editor', 'Cat√°logo': 'Cat√°logo',
          'Portf√≥lio': 'Portafolio', 'Teste': 'Prueba', 'Exemplo': 'Ejemplo',
          'Demo': 'Demo', 'Prot√≥tipo': 'Prototipo', 'Novo': 'Nuevo',
          'P√°gina': 'P√°gina', 'Interface': 'Interfaz', 'Layout': 'Dise√±o',
          // Verbos e adjetivos
          'desenvolvido': 'desarrollado', 'criado': 'creado', 'feito': 'hecho',
          'constru√≠do': 'construido', 'implementado': 'implementado',
          'testando': 'probando', 'traduzindo': 'traduciendo', 'verificando': 'verificando',
          'aplica√ß√£o': 'aplicaci√≥n', 'sistema': 'sistema', 'projeto': 'proyecto',
          'funcional': 'funcional', 'responsivo': 'responsivo', 'moderno': 'moderno',
          'completo': 'completo', 'simples': 'simple', 'avan√ßado': 'avanzado',
          'din√¢mico': 'din√°mico', 'interativo': 'interactivo', 'b√°sico': 'b√°sico',
          'novo': 'nuevo', 'teste': 'prueba', 'exemplo': 'ejemplo',
          'tradu√ß√µes': 'traducciones', 'tradu√ß√£o': 'traducci√≥n', 'projetos': 'proyectos',
          'dos': 'de los', 'das': 'de las', 'do': 'del', 'da': 'de la',
          'as': 'las', 'os': 'los', 'um': 'un', 'uma': 'una',
          // Preposi√ß√µes e conectores
          'com': 'con', 'para': 'para', 'de': 'de', 'em': 'en',
          'usando': 'usando', 'utilizando': 'utilizando', 'atrav√©s': 'atrav√©s',
          'sobre': 'sobre', 'entre': 'entre', 'dentro': 'dentro'
        };

        Object.entries(translations).forEach(([pt, es]) => {
          // Usa regex para buscar palavras inteiras
          const regex = new RegExp(`\\b${pt}\\b`, 'gi');
          translated = translated.replace(regex, es);
        });
      }

      console.log(`‚úÖ Resultado da tradu√ß√£o: "${translated}"`);
      return translated;
    };

    console.log(`üîÑ Auto-traduzindo projeto "${originalTitle}" para ${currentLang}`);

    const result = {
      title: autoTranslateText(originalTitle, currentLang),
      description: autoTranslateText(originalDescription, currentLang)
    };

    console.log('üéØ Resultado final da tradu√ß√£o autom√°tica:', result);
    return result;
  };

  const { title: translatedTitle, description: translatedDescription } = getTranslatedProject(title, description);

  // üß™ Indicador discreto para projetos com tradu√ß√£o autom√°tica (opcional)
  const knownProjects = [
    "Sistema de Agendamento para Est√∫dio de Tatuagem",
    "Portfolio Antigo",
    "Cat√°logo Nick Festas ‚Äì Cat√°logo de Produtos",
    "Desafio Psel Front ‚Äì Consumo da API do IBGE",
    "Calculadora",
    "Portfolio Denivan"
  ];

  const isNewProject = !knownProjects.includes(title);
  const testIndicator = isNewProject && i18n.language !== 'pt' ? '' : ''; // Remover [AUTO-XX] quando n√£o precisar mais

  const finalTitle = translatedTitle + testIndicator;
  const finalDescription = translatedDescription;  // üîó Verifica se tem alguma URL dispon√≠vel
  const hasUrl = !!(liveUrl || githubUrl);

  // üîó Fun√ß√£o para lidar com o clique no card
  const handleCardClick = () => {
    // Prioriza liveUrl, depois githubUrl
    const targetUrl = liveUrl || githubUrl;
    if (targetUrl) {
      window.open(targetUrl, '_blank', 'noopener,noreferrer');
    }
  };

  // üé≠ Fun√ß√£o para calcular rota√ß√£o baseada na posi√ß√£o do mouse
  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {
    const card = e.currentTarget;
    const rect = card.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    const centerX = rect.width / 2;
    const centerY = rect.height / 2;

    const rotateX = (y - centerY) / 10;
    const rotateY = (centerX - x) / 10;

    card.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale3d(1.05, 1.05, 1.05)`;
  };

  const handleMouseLeave = (e: React.MouseEvent<HTMLDivElement>) => {
    const card = e.currentTarget;
    card.style.transform = 'perspective(1000px) rotateX(0deg) rotateY(0deg) scale3d(1, 1, 1)';
  };

  return (
    <CardContainer
      initial="initial"
      whileHover="hover"
      variants={cardHover}
    >
      <TiltCard
        $hasUrl={hasUrl}
        onMouseMove={handleMouseMove}
        onMouseEnter={() => setShowStack(true)}
        onMouseLeave={(e) => {
          setShowStack(false);
          handleMouseLeave(e);
        }}
        onClick={hasUrl ? handleCardClick : undefined}
        style={{ transformStyle: 'preserve-3d' }}
      >
        {/* üé® Overlay da stack - aparece no hover */}
        {showStack && (
          <StackOverlay
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3 }}
          >
            <StackTitle>Stack Tecnol√≥gica</StackTitle>
            <StackList>
              {stack.map((tech, index) => (
                <StackItem key={index}>{tech}</StackItem>
              ))}
            </StackList>
          </StackOverlay>
        )}

        {/* üì∏ Conte√∫do principal do card */}
        <ProjectImage $hasImage={!!imageUrl}>
          {imageUrl && <ProjectImageImg src={imageUrl} alt={finalTitle} />}
          {/* S√≥ mostra o √≠cone se n√£o tiver imagem */}
          {!imageUrl && <ProjectImageIcon>{icon}</ProjectImageIcon>}
          {/* Indicador de clique quando tem URL */}
          <ClickIndicator $visible={hasUrl}>
            {liveUrl ? `üîó ${t('projects.cta.demo')}` : `üìÅ ${t('projects.cta.code')}`}
          </ClickIndicator>
        </ProjectImage>
        <ProjectContent>
          <ProjectTitle>{finalTitle}</ProjectTitle>
          <ProjectDescription>{finalDescription}</ProjectDescription>
        </ProjectContent>
      </TiltCard>
    </CardContainer>
  );
};
